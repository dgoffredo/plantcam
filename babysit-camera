#!/bin/sh

# The time-lapse app on the Android phone stops working sometimes.  I don't
# know if it's Android suspending the "activity," or if it's a crash, or
# something else.  Eventually, though, the phone stops taking pictures.
#
# I have an ssh server running on the same phone, so I can connect to it and
# run `ps` to see if the time-lapse app is still running.  Even that is not
# good enough. Sometimes the process is still there, but the app is no longer
# taking pictures.
#
# Fortunately, the time-lapse app recently introduced an HTTP API.  So, I can
# probe the API to determine whether the app is functioning properly,
# regardless of whether the process appears in the output of `ps`.
#
# If the app is not functioning properly, then I can ssh into the phone and
# escalate my privileges via `su` (the phone is "rooted") and then use `am`
# ("app manager") to start/restart/resume the time-lapse app.
#
# So, to ensure that the phone keeps taking pictures, run this script as a
# `cron` job every now and then.
#
# The logic of this script is described by the following flowchart:
#
#                              ┌──────────────────┐
#                              │ ./babysit-camera │
#                              └──────────────────┘
#                                │
#                                │
#                                ▼
#     ┌───────────┐  running   ┌────────────────────────────┐
#     │   done    │ ◀───────── │                            │
#     └───────────┘            │                            │
#                              │                            │
#       ┌────────────────────▶ │         API/status         │
#       │                      │                            │
#     ┌───────────┐  stopped   │                            │
#     │ API/start │ ◀───────── │                            │
#     └───────────┘            └────────────────────────────┘
#                                │                   ▲    ▲
#                                │ refused           │    │
#                                ▼                   │    │
#                              ┌──────────────────┐  │    │
#                              │      retry       │ ─┘    │
#                              └──────────────────┘       │
#                                │                        │
#                                │ max retries            │
#                                ▼                        │
#                              ┌──────────────────┐       │
#                              │    launch app    │ ──────┘
#                              └──────────────────┘

HOST=192.168.1.112
SSH_PORT=2222
API_PORT=8085

MAX_ATTEMPTS=3
RETRY_SLEEP_SECONDS=2

APP_ACTIVITY=org.woheller69.TimeLapseCam/at.andreasrohner.spartantimelapserec.MainActivity

WORKDIR=$(mktemp -d)
# shellcheck disable=SC2064
trap "rm -r '$WORKDIR'" EXIT

# To capture both the output and exit status of a command, use `run`.
# The command's standard output and error end up in "$WORKDIR/stdout" and
# "$WORKDIR/stderr", respectively, and the command's exit status ends up in
# "$WORKDIR/status".
run() {
  >"$WORKDIR/stdout" 2>"$WORKDIR/stderr" "$@"
  >"$WORKDIR/status" echo "$?"
  return "$(cat "$WORKDIR/status")"
}

check_status() {
  run curl -s "http://$HOST:$API_PORT/1/ctrl/status"
}

api_start() {
  run curl -s "http://$HOST:$API_PORT/1/ctrl/start"
}

launch_app() {
  # shellcheck disable=SC2087
  ssh -T "http://$HOST:$SSH_PORT" <<END_SSH
printf 'am start -n "$APP_ACTIVITY"; exit' | su
END_SSH
}

with_retries() {
  for _ in $(seq "$MAX_ATTEMPTS"); do
    run "$@"
    if [ "$(cat "$WORKDIR/status")" -eq 0 ]; then
      return 0 # success
    fi
    sleep "$RETRY_SLEEP_SECONDS"
  done

  return 1 # too many attempts
}

with_retries_or_fail() {
  if ! with_retries "$@"; then
    >&2 <"$WORKDIR/stderr" cat
    >&2 printf '\nthe command "%s" failed too many times\n' "$@"
    exit 1
  fi
}

babysit() {
  while ! with_retries check_status; do
    with_retries_or_fail launch_app;
  done
  status=$(cat "$WORKDIR/stdout")
  case "$status" in
  stopped)
    with_retries_or_fail api_start
    babysit ;;
  running)
    exit 0 ;;
  *)
    >&2 printf 'unexpected API status: %s\n' "$status"
    exit 1
  esac
}

babysit
